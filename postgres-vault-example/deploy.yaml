---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-boot-postgres
  template:
    metadata:
      labels:
        app: spring-boot-postgres
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "example"

        vault.hashicorp.com/secret-volume-path-application.properties: "/deployments/config"
        vault.hashicorp.com/agent-inject-secret-application.properties: "secret/data/myapp/config"
        vault.hashicorp.com/agent-inject-template-application.properties: |-
          {{- with secret "secret/myapp/config" -}}
          spring.datasource.url=jdbc:postgresql://postgres-postgresql:5432/widget
          spring.datasource.username={{ .Data.data.username }}
          spring.datasource.password={{ .Data.data.password }}
          spring.jpa.hibernate.ddl-auto=none

          management.endpoints.web.exposure.include=refresh,health
          {{- end -}}
    spec:
      containers:
        - name: main
          image: quay.io/adewey/spring-boot-postgres
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
        - name: inotifywait
          image: docker.io/pstauffer/inotify:v1.0.1
          command:
            - /bin/sh
            - -c
          args:
            - |-
              while true; do
                inotifywait -e modify /deployments/config/application.properties;
                curl localhost:8080/actuator/refresh -X POST;
              done
      serviceAccountName: vault-auth
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-postgres
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-postgres
  type: ClusterIP